{"uid":"fd03166e695e8db4","name":"test_registration","fullName":"test.test_conduit.TestConduit#test_registration","historyId":"449695f6039cc9b1b387a819d6e9ef14","time":{"start":1654100727133,"stop":1654100729697,"duration":2564},"status":"failed","statusMessage":"AssertionError: assert '' == 'Email already taken.'\n  - Email already taken.","statusTrace":"self = <test_conduit.TestConduit object at 0x7f57b8aee340>\n\n    def test_registration(self):\n        # navigate to register page\n        main_register_btn = self.browser.find_element_by_xpath('//a[@href=\"#/register\"]')\n        main_register_btn.click()\n        # find elements\n        username_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Username\"]')\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        sign_up_btn = self.browser.find_element_by_xpath('//button[contains(text(), \"Sign up\")]')\n        # asserts: the inputs are available\n        assert username_input.is_enabled()\n        assert email_input.is_enabled()\n        assert password_input.is_enabled()\n        # fill inputs with data (from login_data)\n        username_input.send_keys(registered['username'])\n        email_input.send_keys(registered['email'])\n        password_input.send_keys(registered['password'])\n        # send data\n        sign_up_btn.click()\n        time.sleep(2)\n        # wait for error message\n        error_msg = self.browser.find_element_by_xpath('//div[@class=\"swal-text\"]')\n        # error_msg = self.browser.find_element_by_xpath('//div[text()=\"Email already taken. \"]')\n        # assert error message displayed\n>       assert error_msg.text == 'Email already taken.'\nE       AssertionError: assert '' == 'Email already taken.'\nE         - Email already taken.\n\ntest/test_conduit.py:86: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1654100725366,"stop":1654100727131,"duration":1765},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert '' == 'Email already taken.'\n  - Email already taken.","statusTrace":"self = <test_conduit.TestConduit object at 0x7f57b8aee340>\n\n    def test_registration(self):\n        # navigate to register page\n        main_register_btn = self.browser.find_element_by_xpath('//a[@href=\"#/register\"]')\n        main_register_btn.click()\n        # find elements\n        username_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Username\"]')\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        sign_up_btn = self.browser.find_element_by_xpath('//button[contains(text(), \"Sign up\")]')\n        # asserts: the inputs are available\n        assert username_input.is_enabled()\n        assert email_input.is_enabled()\n        assert password_input.is_enabled()\n        # fill inputs with data (from login_data)\n        username_input.send_keys(registered['username'])\n        email_input.send_keys(registered['email'])\n        password_input.send_keys(registered['password'])\n        # send data\n        sign_up_btn.click()\n        time.sleep(2)\n        # wait for error message\n        error_msg = self.browser.find_element_by_xpath('//div[@class=\"swal-text\"]')\n        # error_msg = self.browser.find_element_by_xpath('//div[text()=\"Email already taken. \"]')\n        # assert error message displayed\n>       assert error_msg.text == 'Email already taken.'\nE       AssertionError: assert '' == 'Email already taken.'\nE         - Email already taken.\n\ntest/test_conduit.py:86: AssertionError","steps":[],"attachments":[{"uid":"825467c1bcaeb068","name":"log","source":"825467c1bcaeb068.txt","type":"text/plain","size":338},{"uid":"39382adf4b8d4b6d","name":"stdout","source":"39382adf4b8d4b6d.txt","type":"text/plain","size":1},{"uid":"7b770cf451db167d","name":"stderr","source":"7b770cf451db167d.txt","type":"text/plain","size":267}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1654100729798,"stop":1654100729854,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az41-311"},{"name":"thread","value":"3160-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fd03166e695e8db4.json","parameterValues":[]}