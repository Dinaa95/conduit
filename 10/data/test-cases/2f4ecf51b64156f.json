{"uid":"2f4ecf51b64156f","name":"test_collect_data","fullName":"test.test_conduit.TestConduit#test_collect_data","historyId":"b8ff59b9978ca6c1c37db19d004e37a6","time":{"start":1654074698005,"stop":1654074700437,"duration":2432},"status":"failed","statusMessage":"AssertionError: assert None == 'None'\n +  where 'None' = <built-in method rstrip of str object at 0x7f9544f9d030>()\n +    where <built-in method rstrip of str object at 0x7f9544f9d030> = 'None\\n'.rstrip","statusTrace":"self = <test_conduit.TestConduit object at 0x7f9544f96a90>\n\n    def test_collect_data(self):\n        # run login function\n        login(self)\n        # navigate to the specific user's profile\n        user_profile_link = 'http://localhost:1667/#/@thetester/'\n        self.browser.get(user_profile_link)\n        time.sleep(1)\n        # find elements\n        profile_pic_link = self.browser.find_element_by_xpath('//img[@class=\"user-img\"]').get_attribute('src')\n        user_name = self.browser.find_element_by_xpath('//div[@class=\"profile-page\"]/div[1]/div/div/div/h4')\n        user_bio = self.browser.find_element_by_xpath('//div[@class=\"profile-page\"]/div[1]/div/div/div/p')\n        user_article_titles = self.browser.find_elements_by_xpath('//h1')\n        # open or create a file, collect data and fill the file with them\n        with open('test/collected_data.txt', 'a', encoding='UTF-8') as data_collection:\n            # username\n            data_collection.write('Current user\\'s name: \\n' + user_name.text + '\\n')\n            # picture link\n            data_collection.write('Profile picture link: \\n' + str(profile_pic_link) + '\\n')\n            # bio\n            data_collection.write('About: \\n' + user_bio.text + '\\n')\n            # articles\n            data_collection.write('Articles ' + user_name.text + ' wrote:\\n')\n            # use for loop to get the article titles\n            for title in user_article_titles:\n                data_collection.write('- ' + title.text + '\\n')\n        # open (read only) the created file\n        with open('test/collected_data.txt', 'r', encoding='UTF-8') as data_collection:\n            # read line-by-line\n            collection_content = data_collection.readlines()\n        # assert article parts equal to the lines\n        assert user_name.text == collection_content[1].rstrip()\n>       assert profile_pic_link == collection_content[3].rstrip()\nE       AssertionError: assert None == 'None'\nE        +  where 'None' = <built-in method rstrip of str object at 0x7f9544f9d030>()\nE        +    where <built-in method rstrip of str object at 0x7f9544f9d030> = 'None\\n'.rstrip\n\ntest/test_conduit.py:259: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1654074696527,"stop":1654074698004,"duration":1477},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert None == 'None'\n +  where 'None' = <built-in method rstrip of str object at 0x7f9544f9d030>()\n +    where <built-in method rstrip of str object at 0x7f9544f9d030> = 'None\\n'.rstrip","statusTrace":"self = <test_conduit.TestConduit object at 0x7f9544f96a90>\n\n    def test_collect_data(self):\n        # run login function\n        login(self)\n        # navigate to the specific user's profile\n        user_profile_link = 'http://localhost:1667/#/@thetester/'\n        self.browser.get(user_profile_link)\n        time.sleep(1)\n        # find elements\n        profile_pic_link = self.browser.find_element_by_xpath('//img[@class=\"user-img\"]').get_attribute('src')\n        user_name = self.browser.find_element_by_xpath('//div[@class=\"profile-page\"]/div[1]/div/div/div/h4')\n        user_bio = self.browser.find_element_by_xpath('//div[@class=\"profile-page\"]/div[1]/div/div/div/p')\n        user_article_titles = self.browser.find_elements_by_xpath('//h1')\n        # open or create a file, collect data and fill the file with them\n        with open('test/collected_data.txt', 'a', encoding='UTF-8') as data_collection:\n            # username\n            data_collection.write('Current user\\'s name: \\n' + user_name.text + '\\n')\n            # picture link\n            data_collection.write('Profile picture link: \\n' + str(profile_pic_link) + '\\n')\n            # bio\n            data_collection.write('About: \\n' + user_bio.text + '\\n')\n            # articles\n            data_collection.write('Articles ' + user_name.text + ' wrote:\\n')\n            # use for loop to get the article titles\n            for title in user_article_titles:\n                data_collection.write('- ' + title.text + '\\n')\n        # open (read only) the created file\n        with open('test/collected_data.txt', 'r', encoding='UTF-8') as data_collection:\n            # read line-by-line\n            collection_content = data_collection.readlines()\n        # assert article parts equal to the lines\n        assert user_name.text == collection_content[1].rstrip()\n>       assert profile_pic_link == collection_content[3].rstrip()\nE       AssertionError: assert None == 'None'\nE        +  where 'None' = <built-in method rstrip of str object at 0x7f9544f9d030>()\nE        +    where <built-in method rstrip of str object at 0x7f9544f9d030> = 'None\\n'.rstrip\n\ntest/test_conduit.py:259: AssertionError","steps":[],"attachments":[{"uid":"5e0801e7f24009b0","name":"log","source":"5e0801e7f24009b0.txt","type":"text/plain","size":338},{"uid":"ddd617e1923ad302","name":"stdout","source":"ddd617e1923ad302.txt","type":"text/plain","size":1},{"uid":"b498829746564a56","name":"stderr","source":"b498829746564a56.txt","type":"text/plain","size":267}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1654074700446,"stop":1654074700501,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az41-984"},{"name":"thread","value":"3322-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"2f4ecf51b64156f.json","parameterValues":[]}