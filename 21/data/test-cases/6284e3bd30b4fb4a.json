{"uid":"6284e3bd30b4fb4a","name":"test_login","fullName":"test.test_conduit.TestConduit#test_login","historyId":"dfb22bde77ddc1a4db05d8eafb8310d3","time":{"start":1654100139109,"stop":1654100140379,"duration":1270},"status":"failed","statusMessage":"AssertionError: assert 'testuser996' in 'conduit\\nHome\\nSign in\\nSign up'\n +  where 'conduit\\nHome\\nSign in\\nSign up' = <selenium.webdriver.remote.webelement.WebElement (session=\"34dbb3612823cc2424f6191a34fc5b48\", element=\"f3f08f41-7fd3-48a7-b3e2-6d007f97119b\")>.text","statusTrace":"self = <test_conduit.TestConduit object at 0x7f2701d09760>\n\n    def test_login(self):\n        # navigate to login page\n        main_login_btn = self.browser.find_element_by_xpath('//a[@href=\"#/login\"]')\n        main_login_btn.click()\n        # find elements\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        sign_in_btn = self.browser.find_element_by_xpath('//button[contains(text(), \"Sign in\")]')\n        # assert the inputs are available\n        assert email_input.is_enabled()\n        assert password_input.is_enabled()\n        # fill the inputs with data (from login_data)\n        email_input.send_keys(registered['email'])\n        password_input.send_keys(registered['password'])\n        # send data\n        sign_in_btn.click()\n        # wait for loading the navbar with name\n        time.sleep(1)\n        # find navbar\n        navbar = self.browser.find_element_by_xpath('//nav')\n        # assert profile_name appear on the navbar\n>       assert registered['username'] in navbar.text\nE       assert 'testuser996' in 'conduit\\nHome\\nSign in\\nSign up'\nE        +  where 'conduit\\nHome\\nSign in\\nSign up' = <selenium.webdriver.remote.webelement.WebElement (session=\"34dbb3612823cc2424f6191a34fc5b48\", element=\"f3f08f41-7fd3-48a7-b3e2-6d007f97119b\")>.text\n\ntest/test_conduit.py:110: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1654100137521,"stop":1654100139107,"duration":1586},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'testuser996' in 'conduit\\nHome\\nSign in\\nSign up'\n +  where 'conduit\\nHome\\nSign in\\nSign up' = <selenium.webdriver.remote.webelement.WebElement (session=\"34dbb3612823cc2424f6191a34fc5b48\", element=\"f3f08f41-7fd3-48a7-b3e2-6d007f97119b\")>.text","statusTrace":"self = <test_conduit.TestConduit object at 0x7f2701d09760>\n\n    def test_login(self):\n        # navigate to login page\n        main_login_btn = self.browser.find_element_by_xpath('//a[@href=\"#/login\"]')\n        main_login_btn.click()\n        # find elements\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        sign_in_btn = self.browser.find_element_by_xpath('//button[contains(text(), \"Sign in\")]')\n        # assert the inputs are available\n        assert email_input.is_enabled()\n        assert password_input.is_enabled()\n        # fill the inputs with data (from login_data)\n        email_input.send_keys(registered['email'])\n        password_input.send_keys(registered['password'])\n        # send data\n        sign_in_btn.click()\n        # wait for loading the navbar with name\n        time.sleep(1)\n        # find navbar\n        navbar = self.browser.find_element_by_xpath('//nav')\n        # assert profile_name appear on the navbar\n>       assert registered['username'] in navbar.text\nE       assert 'testuser996' in 'conduit\\nHome\\nSign in\\nSign up'\nE        +  where 'conduit\\nHome\\nSign in\\nSign up' = <selenium.webdriver.remote.webelement.WebElement (session=\"34dbb3612823cc2424f6191a34fc5b48\", element=\"f3f08f41-7fd3-48a7-b3e2-6d007f97119b\")>.text\n\ntest/test_conduit.py:110: AssertionError","steps":[],"attachments":[{"uid":"65664ed2b7aca8d0","name":"log","source":"65664ed2b7aca8d0.txt","type":"text/plain","size":338},{"uid":"e471fdbed4cf3a35","name":"stdout","source":"e471fdbed4cf3a35.txt","type":"text/plain","size":1},{"uid":"bbbecb22358efa26","name":"stderr","source":"bbbecb22358efa26.txt","type":"text/plain","size":267}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1654100140387,"stop":1654100140443,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az296-643"},{"name":"thread","value":"3210-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"6284e3bd30b4fb4a.json","parameterValues":[]}