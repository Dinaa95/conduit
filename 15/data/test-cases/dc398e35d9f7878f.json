{"uid":"dc398e35d9f7878f","name":"test_registration","fullName":"test.test_conduit.TestConduit#test_registration","historyId":"449695f6039cc9b1b387a819d6e9ef14","time":{"start":1654080193092,"stop":1654080197148,"duration":4056},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7fa79c751580>\n\n    def test_registration(self):\n        # navigate to register page\n        main_register_btn = self.browser.find_element_by_xpath('//a[@href=\"#/register\"]')\n        main_register_btn.click()\n        # find elements\n        username_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Username\"]')\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        sign_up_btn = self.browser.find_element_by_xpath('//button[contains(text(), \"Sign up\")]')\n        # asserts: the inputs are available\n        assert username_input.is_enabled()\n        assert email_input.is_enabled()\n        assert password_input.is_enabled()\n        # fill inputs with data (from login_data)\n        username_input.send_keys(registered['username'])\n        email_input.send_keys(registered['email'])\n        password_input.send_keys(registered['password'])\n        # send data\n        sign_up_btn.click()\n        # wait for error message\n>       error = WebDriverWait(self.browser, 3).until(\n            EC.presence_of_element_located((By.XPATH, '//div[text()=\"Email already taken. \"]')))\n\ntest/test_conduit.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d40da259028294c0ca8fd7b074b8ba90\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7fa79d4a3f10>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1654080191379,"stop":1654080193090,"duration":1711},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7fa79c751580>\n\n    def test_registration(self):\n        # navigate to register page\n        main_register_btn = self.browser.find_element_by_xpath('//a[@href=\"#/register\"]')\n        main_register_btn.click()\n        # find elements\n        username_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Username\"]')\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        sign_up_btn = self.browser.find_element_by_xpath('//button[contains(text(), \"Sign up\")]')\n        # asserts: the inputs are available\n        assert username_input.is_enabled()\n        assert email_input.is_enabled()\n        assert password_input.is_enabled()\n        # fill inputs with data (from login_data)\n        username_input.send_keys(registered['username'])\n        email_input.send_keys(registered['email'])\n        password_input.send_keys(registered['password'])\n        # send data\n        sign_up_btn.click()\n        # wait for error message\n>       error = WebDriverWait(self.browser, 3).until(\n            EC.presence_of_element_located((By.XPATH, '//div[text()=\"Email already taken. \"]')))\n\ntest/test_conduit.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d40da259028294c0ca8fd7b074b8ba90\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7fa79d4a3f10>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException","steps":[],"attachments":[{"uid":"58f36ddbc2478f48","name":"log","source":"58f36ddbc2478f48.txt","type":"text/plain","size":338},{"uid":"3b176beb43143b89","name":"stdout","source":"3b176beb43143b89.txt","type":"text/plain","size":1},{"uid":"dbd6c2765cc1b147","name":"stderr","source":"dbd6c2765cc1b147.txt","type":"text/plain","size":267}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1654080197202,"stop":1654080197258,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az445-206"},{"name":"thread","value":"3425-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"dc398e35d9f7878f.json","parameterValues":[]}