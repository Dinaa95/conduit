{"uid":"d563f9c0bfa2cd57","name":"test_login","fullName":"test.test_conduit.TestConduit#test_login","historyId":"dfb22bde77ddc1a4db05d8eafb8310d3","time":{"start":1654083502080,"stop":1654083503345,"duration":1265},"status":"failed","statusMessage":"AssertionError: assert 'testuser996' in 'conduit\\nHome\\nSign in\\nSign up'\n +  where 'conduit\\nHome\\nSign in\\nSign up' = <selenium.webdriver.remote.webelement.WebElement (session=\"5695676ca494d77af67827edf8cc0214\", element=\"f263f2f2-d06b-4628-86b8-3be29ab2e40e\")>.text","statusTrace":"self = <test_conduit.TestConduit object at 0x7f68365b0610>\n\n    def test_login(self):\n        # navigate to login page\n        main_login_btn = self.browser.find_element_by_xpath('//a[@href=\"#/login\"]')\n        main_login_btn.click()\n        # find elements\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        sign_in_btn = self.browser.find_element_by_xpath('//button[contains(text(), \"Sign in\")]')\n        # assert the inputs are available\n        assert email_input.is_enabled()\n        assert password_input.is_enabled()\n        # fill the inputs with data (from login_data)\n        email_input.send_keys(registered['email'])\n        password_input.send_keys(registered['password'])\n        # send data\n        sign_in_btn.click()\n        # wait for loading the navbar with name\n        time.sleep(1)\n        # find navbar\n        navbar = self.browser.find_element_by_xpath('//nav')\n        # assert profile_name appear on the navbar\n>       assert registered['username'] in navbar.text\nE       assert 'testuser996' in 'conduit\\nHome\\nSign in\\nSign up'\nE        +  where 'conduit\\nHome\\nSign in\\nSign up' = <selenium.webdriver.remote.webelement.WebElement (session=\"5695676ca494d77af67827edf8cc0214\", element=\"f263f2f2-d06b-4628-86b8-3be29ab2e40e\")>.text\n\ntest/test_conduit.py:112: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1654083500600,"stop":1654083502079,"duration":1479},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'testuser996' in 'conduit\\nHome\\nSign in\\nSign up'\n +  where 'conduit\\nHome\\nSign in\\nSign up' = <selenium.webdriver.remote.webelement.WebElement (session=\"5695676ca494d77af67827edf8cc0214\", element=\"f263f2f2-d06b-4628-86b8-3be29ab2e40e\")>.text","statusTrace":"self = <test_conduit.TestConduit object at 0x7f68365b0610>\n\n    def test_login(self):\n        # navigate to login page\n        main_login_btn = self.browser.find_element_by_xpath('//a[@href=\"#/login\"]')\n        main_login_btn.click()\n        # find elements\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        sign_in_btn = self.browser.find_element_by_xpath('//button[contains(text(), \"Sign in\")]')\n        # assert the inputs are available\n        assert email_input.is_enabled()\n        assert password_input.is_enabled()\n        # fill the inputs with data (from login_data)\n        email_input.send_keys(registered['email'])\n        password_input.send_keys(registered['password'])\n        # send data\n        sign_in_btn.click()\n        # wait for loading the navbar with name\n        time.sleep(1)\n        # find navbar\n        navbar = self.browser.find_element_by_xpath('//nav')\n        # assert profile_name appear on the navbar\n>       assert registered['username'] in navbar.text\nE       assert 'testuser996' in 'conduit\\nHome\\nSign in\\nSign up'\nE        +  where 'conduit\\nHome\\nSign in\\nSign up' = <selenium.webdriver.remote.webelement.WebElement (session=\"5695676ca494d77af67827edf8cc0214\", element=\"f263f2f2-d06b-4628-86b8-3be29ab2e40e\")>.text\n\ntest/test_conduit.py:112: AssertionError","steps":[],"attachments":[{"uid":"6e1b5d5d54f9668","name":"log","source":"6e1b5d5d54f9668.txt","type":"text/plain","size":338},{"uid":"b0dc191a83d3de38","name":"stdout","source":"b0dc191a83d3de38.txt","type":"text/plain","size":1},{"uid":"ad8fc08bd295dfb","name":"stderr","source":"ad8fc08bd295dfb.txt","type":"text/plain","size":267}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1654083503353,"stop":1654083503409,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az178-201"},{"name":"thread","value":"3136-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d563f9c0bfa2cd57.json","parameterValues":[]}